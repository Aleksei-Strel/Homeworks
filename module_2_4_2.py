# Домашняя работа по уроку "Цикл for. Элементы списка. Полезные функции в цикле"
#
# Задача "Всё не так уж просто":
# Дан список чисел  numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
# Испольуя этот список составьте второй список primes содержащий только простые числа.
# А так же третий список not_primes, содержащий все не простые числа.
# Выведите списки primes и not_primes на экран(в консоль).

# Определим входные данные
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]  # исходный список
n = 0 # Проверямое число

# Пункты задачи:
# Создайте пустые списки primes и not_primes.
primes = []  # список простых чисел
not_primes = []  # список составных чисел
i = 0  # задаём счетчик
# При помощи цикла for переберите список numbers.
# Напишите ещё один цикл for (вложенный), где будут подбираться делители для числа из 1ого цикла.
# Отметить простоту числа можно переменной , записав в неё занчение True перед проверкой.
# В процессе проверки на простоту записывайте числа из списка numbers в списки primes и not_primes
# в зависимости от значения перменной is_prime после проверки (True - в prime, False - в not_prime).
# Выведите списки primes и not_primes на экран(в консоль).

for i in range(len(numbers)):
    is_prime = True  # признак простого числа
    #    k = 0
    n = numbers[i]  # Проверямое число
# используем алгоритм "Перебор делителей" для определения простого  числа

    if n < 2:   # не 0 и не 1
        print(n, '- не простое и не сложное число')
        continue
    else:
# 1-й вариант решения
# Заданное число отлично от 0 и 1, не делится ни на одно из простых чисел,
# начиная с 2 и заканчивая значением, меньшим или равным квадратному корню
# рассматриваемого числа.
        f = n ** (1 / 2)  # Корень квадратный из n
    for a in range(2, int(f + 1)):
        if n % a == 0:
            is_prime = False
            break
# 2-й вариант решения
# Достаточно проверить, что число отлично от 1, не делится ни на одно
# из простых чисел, квадрат которых не превосходит рассматриваемое число.
# здесь используется вложенный цикл while
#         k = 2
#         j = 0
    # is_prime
#     while n >= k * k and j != 1:
#         if n % k == 0:
#             j = 1
#             is_prime = False
#             break
#         k = k + 1
    if not (is_prime):
        not_primes.append(n)
    else:
        primes.append(n)
is_prime = True  # признак простого числа
print('Простые числа ', primes)
print('Составные числа', not_primes)